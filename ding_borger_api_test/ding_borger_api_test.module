<?php

// $Id$

/**
 * Implementation of hook_menu.
 */
function ding_borger_api_test_menu() {
  $items = array();

  $items['admin/settings/ding_borger_api_test'] = array(
      'title' => 'Ding! Borger.dk API test',
      'description' => 'Test the Ding! Borger.dk API test',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ding_borger_api_test_form'),
      'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * The basic test form with fiels to set the values which will normally be set by the borger.dk portal.
 */
function ding_borger_api_test_form(&$form_state) {
	$form = array();	
  $form['UserProfileMapping_Cprnummer'] = array(
    '#type' => 'textfield',
    '#title' => t('CPR'),
    '#default_value' => (isset($_SESSION['ding_borger_api_test_cpr'])) ? $_SESSION['ding_borger_api_test_cpr'] : '',
  );
  unset($_SESSION['ding_borger_api_test_cpr']);
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Load data'),
  );

  //Nest the result of previous submissions within the test form.
  //FIXME: There must be a better way of transfering values from submit
  //to form than using session.
  if (isset($_SESSION['ding_borger_api_test_result'])) {
	  $form['data'] = array(
		  '#type' => 'fieldset',
		  '#title' => t('Data'),
	  );
    $form['data']['markup'] = array(
      '#type' => 'markup',
      '#value' => $_SESSION['ding_borger_api_test_result'],
    );
		unset($_SESSION['ding_borger_api_test_result']);
  }
	
  return $form;
}

/**
 * Submit handler for the borger.dk test form.
 */
function ding_borger_api_test_form_submit($form, &$form_state) {
	$data = $_POST;
  if ($data['UserProfileMapping_Cprnummer']) {
  	$_SESSION['ding_borger_api_test_cpr'] = $data['UserProfileMapping_Cprnummer'];
  	//Remove values from the submitted data which would not be transfered from Borger.dk normally
    foreach (array('form_build_id', 'form_token', 'form_id', 'submit', 'data_value') as $key) {
      unset ($data[$key]);    
    }
    
    $service_url = url('ding_borger_api/service', array(absolute => TRUE));
    
    //Build the HTTP POST data
    $http_data = _ding_borger_api_test_create_http_data($data);
    $http_data = implode('&', $http_data);
    
    watchdog('ding_borger_api_test', t('Request: @url (data: @data)'), array('@url' => $service_url, '@data' => $http_data), WATCHDOG_DEBUG);
    
    //Send the request to the Borger.dk moduling mimicking a request from the Borger.dk portal
    $response = drupal_http_request($service_url, array('Content-Type' => 'application/x-www-form-urlencoded'), 'POST', $http_data);
    
    watchdog('ding_borger_api_test', t('Reponse: @response'), array('@response' => var_export($response, true)), WATCHDOG_DEBUG);
    
    //Store the response in the session
    if ($response->code == 200) {
      $_SESSION['ding_borger_api_test_result'] = $response->data;
    } else {
    	$_SESSION['ding_borger_api_test_result'] = $response->code.': '.$response->status_message;
    }
  }
}

/**
 * Build an array of http data from a (nested) form array structure.
 *
 * @param array $data The form data
 * @param string $prefix Prefix to use if the form data is nested within a form structure.
 * @return array A flat array of http data;
 */
function _ding_borger_api_test_create_http_data($data, $prefix = NULL) {
	$http_data = array();
	foreach ($data as $key => $value) {
		$key = ($prefix) ? $prefix.'['.$key.']' : $key;
		if (is_array($value)) {
			$http_data = array_merge($http_data, _ding_borger_api_test_create_http_data($value, $key));
		} else {
			$http_data[] = $key.'='.$value;
		}
	}
	return $http_data;
}
