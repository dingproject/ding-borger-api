<?php

// $Id$

/**
 * Implementation of hook_menu.
 */
function ding_borger_api_menu() {
  $items = array();

  $items['ding_borger_api/service'] = array(
      'title' => 'View data',
      'description' => 'View data for your loans and reservations on borger.dk',
      'page callback' => 'ding_borger_api_service',
      'page arguments' => array(''),
      'access arguments' => array('access content'), //mÃ¥ske lave IP block her?
      'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Central callback which handles display as well as submission.
 */
function ding_borger_api_service() {
  global $user;
  global $base_path;
  
  //Force absolute urls as links will be rendered on a separate site site and needs to link back to us
  $base_path = url('', array('absolute' => TRUE));

  //Authenticate the user based on CPR number provided by the caller and a central password
  if (isset($_POST['UserProfileMapping_Cprnummer']) && is_numeric($_POST['UserProfileMapping_Cprnummer']))  {
    $cpr=$_POST['UserProfileMapping_Cprnummer'];
  }
  $password = variable_get('ding_borger_api_library_user_password', '');
  $res = ding_library_user_authenticate_user($cpr, $password);
  
  if ($res) {
    if (isset($_POST['op'])) {
      switch($_POST['op']) {
        case t('Renew all'):
        case t('Renew selected'):
        	_ding_borger_api_save_loans($_POST);
          break;
        //FIXME: Do not hardcode button values. Use values from form alter instead
        case t('Save changes for selected reservations'):
        case t('Delete selected reservations'):
          _ding_borger_api_save_reservations($_POST);
          break;
      }
    }

    // Print final output
    print theme('ding_borger_api_response', $user);
  } else {
    drupal_not_found();
  }
}

function _ding_borger_api_save_loans($data) {
  global $user;

  //Remember to include the loan form definition
  module_load_include('forms.inc', 'ding_library_user');
  
  //Transfer submitted values to Drupal form state array
  $form_state = array();
  $form_state['values'] = $data;
  
  //Execute the original loan list form programmatically
  $loans = ding_provider_invoke('loan', 'get loans', $user);
  if ($list != DING_PROVIDER_AUTH_REQUIRED) {
    drupal_execute('ding_library_user_loan_list_form', $form_state, $user, $loans);
  }
}

function _ding_borger_api_save_reservations($data) {
  global $user;

  //Remember to include the reservation form definition
  module_load_include('module', 'ding_reservation');
  
  //Transfer submitted values to Drupal form state array
  $form_state = array();
  $form_state['values'] = $data;
  
  //Execute the original reservation list form programmatically
  $reservations = ding_provider_invoke('reservation', 'list', $user);
  if ($list != DING_PROVIDER_AUTH_REQUIRED) {
    drupal_execute('ding_reservation_list_form', $form_state, $user, $reservations);
  }
}

/**
 * Implementation of hook_theme().
 */
function ding_borger_api_theme($existing, $type, $theme, $path) {
  return array(
    'ding_borger_api_response' => array(
      'arguments' => array('account' => NULL),
      'template' => 'ding_borger_api_response',
    ),
  );
}

/**
 * Implementation of hook_requirements().
 */
function ding_borger_api_requirements($phase) {
	$requirement = array('title' => t('Ding! Borger.dk API'));

	if ($phase == 'runtime') {
		if (!variable_get('ding_borger_api_library_user_password', FALSE)) {
      $requirement['severity'] = REQUIREMENT_ERROR;
      $requirement['value'] = 'Password missing';
      $requirement['description'] = t('Missing central library user password to use when authenticating 
      users accessing the site through the Borger.dk API. This should be set i settings.php. There is
      no administration interface for doing this.');
		} else {
      $requirement['severity'] = REQUIREMENT_OK;
      $requirement['value'] = t('Configuration OK');
		}
	}
	
	return array($requirement);
}

function ding_borger_api_preprocess_ding_borger_api_response($vars) {
	$account = $vars['account'];
	
  //Generate debts notice
  //FIXME: There must be a more clean way of doing this!
  ctools_include('debt_list', 'ding_debt', 'plugins/content_types');
  module_load_include('forms.inc', 'ding_library_user');
  $context = new stdClass();
  $context->data = $account;
  $debt_block = ding_debt_debt_list_content_type_render('ding_debt_notice', NULL, NULL, $context);
  $vars['debt_notice'] = $debt_block->content;

  // Generate loans form HTML
  $loans = ding_provider_invoke('loan', 'get loans', $account);
  $loan_html = drupal_get_form('ding_library_user_loan_list_form', $account, $loans);
  $vars['loans'] = _ding_borger_api_process_form_markup($loan_html);

  // Generate reservations form HTML
  $reservations = ding_provider_invoke('reservation', 'list', $account);
  $res_html=drupal_get_form('ding_reservation_list_form', $account, $reservations);
  $vars['reservations'] = _ding_borger_api_process_form_markup($res_html);
}

/**
 * Remove all markup which should not be displayed in the response to borger.dk.
 * 
 * @param string $html the original markup
 * @return string cleaned up markup
 */
function _ding_borger_api_process_form_markup($html) {
  $remove_patterns = array('/<form[^>]*>/',
                           '/<\/form[^>]*>/',
                           '/<input[^>]*form_build_id[^>]*>/',
                           '/<input[^>]*form_id[^>]*>/');
  return preg_replace($remove_patterns, '', $html);	
}
