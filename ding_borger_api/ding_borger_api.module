<?php

// $Id$

/**
 * Implementation of hook_menu.
 */
function ding_borger_api_menu() {
  $items = array();

  $items['ding_borger_api/service'] = array(
    'title' => 'View data',
    'description' => 'Render user loans and reservations as a portal add-in on borger.dk',
    'page callback' => 'ding_borger_api_service',
    'access callback' => 'ding_borger_api_service_access',
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/ding/borger_api'] = array(
    'title' => 'Borger.dk API',
    'description' => 'Administer the Borger.dk API',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_borger_api_admin_settings_form'),
    'file' => 'ding_borger_api.admin.inc',
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/settings/ding/borger_api/settings'] = array(
    'title' => 'Settings',
    'description' => 'Administer settings for the Borger.dk API',
    'type' => MENU_DEFAULT_LOCAL_TASK,
	  'weight' => -10,
  );

  return $items;
}

/**
 * Central callback which handles display as well as submission.
 */
function ding_borger_api_service() {
  global $user;
  global $base_path;

  // Force absolute urls as links will be rendered on a separate site site and needs to link back to us
  $base_path = url('', array('absolute' => TRUE));

  $cpr = (isset($_POST['UserProfileMapping_Cprnummer']) && is_numeric($_POST['UserProfileMapping_Cprnummer'])) ? $_POST['UserProfileMapping_Cprnummer'] : FALSE;
  $action = isset($_POST['op']) ? $_POST['op'] : FALSE;

  // Return cached response if no form action is called or test module is used
  if ((!$action || ($action == t('Load data'))) &&
      $cache = cache_get(md5($cpr), 'cache_ding_borger_api_response')) {
    print $cache->data;
    return;
  }

  // Authenticate the user based on CPR number provided by the caller and a central password
  $password = variable_get('ding_borger_api_library_user_password', '');
  $res = ding_library_user_authenticate_user($cpr, $password);

  if ($res) {
    switch($action) {
      //FIXME: Hardcoding button values does not support changes later on. Can we use values from form alter instead?
      case t('Renew all'):
      case t('Renew selected'):
        _ding_borger_api_save_loans($_POST);
        break;
      case t('Save changes for selected reservations'):
      case t('Delete selected reservations'):
        _ding_borger_api_save_reservations($_POST);
        break;
    }

    // Get messages generated by this call as they will be cleared when rendering
    $messages = drupal_get_messages(NULL, FALSE);
    	
    // Render final output
    $response = theme('ding_borger_api_response', $user);
    
    // Postprocess the response
    $response = ding_borger_api_process_response($response);
    
    if (sizeof($messages) == 0) {
      // No messages? Cache output for 5 minutes
      // TODO: Move configuration of cache duration to administration
      cache_set(md5($cpr), $response, 'cache_ding_borger_api_response', variable_get('ding_borger_api_response_cache_duration', 300));
    }

    print $response;
  } else {
    //Unable to authenticate the user. As we use a central password and assume this is valid
    //the most likely reason is that the CPR number is not registered in the system so
    //return with a 404.
    drupal_not_found();
  }
}

/**
 * Access callback for the service. Restricts access by IP.
 */
function ding_borger_api_service_access() {
  $allowed_ips = variable_get('ding_borger_api_allowed_ips', FALSE);
  $allowed_ips = explode("\r\n", $allowed_ips);
  //If access restriction has been configured the IP address must be in the list.
  //Otherwise let everbody through.
  return (sizeof(array_filter($allowed_ips)) > 0) ? in_array(ip_address(), $allowed_ips) : true;
}

function _ding_borger_api_save_loans($data) {
  global $user;

  //Remember to include the loan form definition
  module_load_include('forms.inc', 'ding_library_user');

  //Transfer submitted values to Drupal form state array
  $form_state = array();
  $form_state['values'] = $data;

  //Execute the original loan list form programmatically
  $loans = ding_provider_invoke('loan', 'get loans', $user);
  if ($list != DING_PROVIDER_AUTH_REQUIRED) {
    drupal_execute('ding_library_user_loan_list_form', $form_state, $user, $loans);
  }
}

function _ding_borger_api_save_reservations($data) {
  global $user;

  //Remember to include the reservation form definition
  module_load_include('module', 'ding_reservation');

  //Transfer submitted values to Drupal form state array
  $form_state = array();
  $form_state['values'] = $data;

  //Execute the original reservation list form programmatically
  $reservations = ding_provider_invoke('reservation', 'list', $user);
  if ($list != DING_PROVIDER_AUTH_REQUIRED) {
    drupal_execute('ding_reservation_list_form', $form_state, $user, $reservations);
  }
}

/**
 * Implementation of hook_theme().
 */
function ding_borger_api_theme($existing, $type, $theme, $path) {
  return array(
    'ding_borger_api_response' => array(
      'arguments' => array('account' => NULL),
      'template' => 'ding_borger_api_response',
  ),
  );
}

/**
 * Implementation of hook_requirements().
 */
function ding_borger_api_requirements($phase) {
  $requirements = array();
  
  $requirement = array('title' => t('Ding! Borger.dk API Password'));
  if ($phase == 'runtime') {
    if (!variable_get('ding_borger_api_library_user_password', FALSE)) {
      $requirement['severity'] = REQUIREMENT_ERROR;
      $requirement['value'] = 'Password missing';
      $requirement['description'] = t('Missing central library user password to use when authenticating
      users accessing the site through the Borger.dk API. This should be set i settings.php. There is
      no administration interface for doing this.');
    } else {
      $requirement['severity'] = REQUIREMENT_OK;
      $requirement['value'] = t('Password configured');
    }
  }
  $requirements[] = $requirement;

  $requirement = array('title' => t('Ding! Borger.dk API CSS Inliner'));
  if ($phase == 'runtime') {
    if (ding_borger_api_load_emogrifier() === FALSE) {
      $requirement['severity'] = REQUIREMENT_ERROR;
      $requirement['value'] = 'Emogrifier missing';
      $requirement['description'] = t('Download emogrifier library from !link and extracted at %path.', 
                                      array('!link' => l('http://www.pelagodesign.com/sidecar/emogrifier/'),
                                            '%path' => drupal_get_path('module', 'ding_borger_api').'/lib/emogrifier/'));
    } else {
      $requirement['severity'] = REQUIREMENT_OK;
      $requirement['value'] = t('!emogrifier available', array('!emogrifier' => l('Emogrifier', 'http://www.pelagodesign.com/sidecar/emogrifier/')));
    }
  }
  $requirements[] = $requirement;
  
  
  return $requirements; 
}

/**
 * Implementation of hook_flush_caches().
 */
function ding_borger_api_flush_caches() {
  return array('cache_ding_borger_api_response');
}

function ding_borger_api_preprocess_ding_borger_api_response($vars) {
  $account = $vars['account'];

  //Generate debts notice
  //FIXME: There must be a more clean way of doing this!
  ctools_include('debt_list', 'ding_debt', 'plugins/content_types');
  module_load_include('forms.inc', 'ding_library_user');
  $context = new stdClass();
  $context->data = $account;
  $debt_block = ding_debt_debt_list_content_type_render('ding_debt_notice', NULL, NULL, $context);
  $vars['debt_notice'] = $debt_block->content;

  // Generate loans form HTML
  $loans = ding_provider_invoke('loan', 'get loans', $account);
  $vars['loans'] = drupal_get_form('ding_library_user_loan_list_form', $account, $loans);

  // Generate reservations form HTML
  $reservations = ding_provider_invoke('reservation', 'list', $account);
  $vars['reservations'] = drupal_get_form('ding_reservation_list_form', $account, $reservations);
}

/**
 * Process the response markup before returning it to the 
 * Enter description here ...
 * @param unknown_type $markup
 */
function ding_borger_api_process_response($markup) {
  //Remove form tags and elements which shouldn't be sent to Borger.dk
  $remove_patterns = array('/<form[^>]*>/',
                           '/<\/form[^>]*>/',
                           '/<input[^>]*form_build_id[^>]*>/',
                           '/<input[^>]*form_id[^>]*>/');
  $markup = preg_replace($remove_patterns, '', $markup);
  
  //Inject style sheet content into the response as inline styles using 
  //the Emogrifier library, http://www.pelagodesign.com/sidecar/emogrifier/.
  ding_borger_api_load_emogrifier();
  if (class_exists('Emogrifier')) {
    //Load the style sheet and convert relative to absolute urls
    $css = file_get_contents(drupal_get_path('module','ding_borger_api').'/css/ding_borger_api.css');
    $css = preg_replace('/url\((.*?)\)/i', 'url('.url(drupal_get_path('module', 'ding_borger_api').'/css', array('absolute' => true)).'/$1)', $css);
    
    //Let Emogrifier do its work
    $emogrifier = new Emogrifier();
    $emogrifier->setHTML($markup);
    $emogrifier->setCSS($css);
    $markup = $emogrifier->emogrify();
    
    //Remove document tags added by Emogrifier. They shouldn't be sent to Borger.dk.
    $remove_patterns = array('/<\?xml[^>]*>/',
                             '/<!DOCTYPE[^>]*>/',
                             '/<html[^>]*>/',
                             '/<\/html[^>]*>/',
                             '/<body[^>]*>/',
                             '/<\/body[^>]*>/',);
    $markup = trim(preg_replace($remove_patterns, '', $markup));       
  }
  return $markup;
}

/**
 * Load the Emogrifier library
 * 
 * @return FALSE if not unable to load the response
 */
function ding_borger_api_load_emogrifier() {
  //For some reason drush_make in the dev and production environment does
  //not extract the emogrifier.zip file correctly and as a result calls
  //the file emogrifier instead of emogrifier.php.
  //This handles both situations
  $path = drupal_get_path('module', 'ding_borger_api').'/lib/emogrifier/emogrifier';
  if (file_exists($path)) {
    require_once $path;
  } elseif (file_exists($path.'.php')) {
    require_once $path.'.php';
  } else {
    return FALSE;
  }
}