<?php

// $Id$

/**
 * Implementation of hook_menu.
 */
function ding_borger_api_menu() {
  $items = array();

  $items['ding_borger_api/service'] = array(
      'title' => 'View data',
      'description' => 'View data for your loans and reservations on borger.dk',
      'page callback' => 'ding_borger_api_service',
      'page arguments' => array(''),
      'access arguments' => array('access content'), //mÃ¥ske lave IP block her?
      'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Central callback which handles display as well as submission.
 */
function ding_borger_api_service() {
  global $user;
  
  //Authenticate the user based on CPR number provided by the caller and a central password
  if (isset($_POST['UserProfileMapping_Cprnummer']) && is_numeric($_POST['UserProfileMapping_Cprnummer']))  {
    $cpr=$_POST['UserProfileMapping_Cprnummer'];
  }
  $password = variable_get('ding_borger_api_library_user_password', '');
  $res = ding_library_user_authenticate_user($cpr, $password);
  
  if ($res) {
    if (isset($_POST['op'])) {
      switch($_POST['op']) {
        case t('Renew all'):
        case t('Renew selected'):
        	_ding_borger_api_save_loans($_POST);
          break;
        //FIXME: Do not hardcode button values. Use values from form alter instead
        case t('Save changes for selected reservations'):
        case t('Delete selected reservations'):
          _ding_borger_api_save_reservations($_POST);
          break;
      }
    }

    module_load_include('forms.inc', 'ding_library_user');

    // Generate loans form html
    $loans = ding_provider_invoke('loan', 'get loans', $user);
    $loan_html = drupal_get_form('ding_borger_api_loan_list_form', $loans);
    $loan_html = _ding_borger_api_process_form_markup($loan_html);
    
    // Generate reservations form html
    $reservations = ding_provider_invoke('reservation', 'list', $user);
    $res_html=drupal_get_form('ding_borger_api_reservation_list_form', $reservations);
    $res_html = _ding_borger_api_process_form_markup($res_html);

    print $loan_html;
    print $res_html;
  } else {
    drupal_set_message('No Access', 'error');
  }
}

function _ding_borger_api_save_loans($data) {
  global $user;
  module_load_include('forms.inc', 'ding_library_user');
  $form_state=array();
  $form_state['values']['loans'] = $data['loans'];
  $form_state['values']['op'] = $data['op'];

  $list = ding_provider_invoke('loan', 'get loans', $user);
  if ($list != DING_PROVIDER_AUTH_REQUIRED) {
    drupal_execute('ding_library_user_loan_list_form', $form_state, $user, $list);
  }
}

function _ding_borger_api_save_reservations($data) {
  global $user;
  
  $form_state = array();
  $form_state['values']['selected'] = $data['reserved'];
  $form_state['values']['op'] = $data['op'];

  $form_state['values']['new_expiry'] = $data['new_expiry'];
  $form_state['values']['new_pickup_branch'] = $data['new_pickup_branch'];

  $list = ding_provider_invoke('reservation', 'list', $user);
  if ($list != DING_PROVIDER_AUTH_REQUIRED) {
    drupal_execute('ding_reservation_list_form', $form_state, $user, $list);
  }
}

/**
 * Implementation of hook_theme().
 */
function ding_borger_api_theme($existing, $type, $theme, $path) {
  return array(
    'ding_borger_api_reservation_list_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'ding_borger_api.theme.inc',
    ),
    'ding_borger_api_loan_list_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'ding_borger_api.theme.inc',
    ),
      );
}

/**
 * Implementation of hook_requirements().
 */
function ding_borger_api_requirements($phase) {
	$requirement = array('title' => t('Ding! Borger.dk API'));

	if ($phase == 'runtime') {
		if (!variable_get('ding_borger_api_library_user_password', FALSE)) {
      $requirement['severity'] = REQUIREMENT_ERROR;
      $requirement['value'] = 'Password missing';
      $requirement['description'] = t('Missing central library user password to use when authenticating 
      users accessing the site through the Borger.dk API. This should be set i settings.php. There is
      no administration interface for doing this.');
		} else {
      $requirement['severity'] = REQUIREMENT_OK;
      $requirement['value'] = t('Configuration OK');
		}
	}
	
	return array($requirement);
}

/**
 * 
 */
function ding_borger_api_reservation_list_form($form_state, $records) {
  // TODO: Move this variable.
  $cancel_fetchable = (boolean) variable_get('ding_library_user_cancel_fetchable_reservable', TRUE);
  $form = array();

  $form['reservations'] = array(
    '#type' => 'value',
    '#grouped' => array(),
    '#value' => array(),
  );

  $form['reserved'] = array(
    '#tree' => TRUE,
  );

  foreach ($records as $reservation) {
    $form['reservations']['#value'][$reservation['id']] = $reservation;
    $form['reservations']['#grouped'][$reservation['status']][$reservation['id']] = $reservation;

    $form['reserved'][$reservation['id']] = array(
      '#type' => 'checkbox',
      '#return_value' => $reservation['id'],
      '#disabled' => TRUE,
    );
    if ($reservation['status'] == 'active' || ($cancel_fetchable && $reservation['status'] == 'fetchable')) {
      $form['reserved'][$reservation['id']]['#disabled'] = FALSE;
    }
  }

  return $form;
}

function ding_borger_api_form_ding_borger_api_reservation_list_form_alter(&$form, $form_state) {
	//Perform same form alters on this form as on ding_reservation_list_form
	//to support actions added by Ding providers
  $data = &$form;
  $data['__drupal_alter_by_ref'] = array(&$form_state);
  drupal_alter('form_'. 'ding_reservation_list_form', $data);

  // __drupal_alter_by_ref is unset in the drupal_alter() function, we need
  // to repopulate it to ensure both calls get the data.
  $data['__drupal_alter_by_ref'] = array(&$form_state);
  drupal_alter('form', $data, 'ding_reservation_list_form');
}

/**
 * Loan details form.
 *
 * @todo Way too much logic in the theme function. Move some of it here.
 */
function ding_borger_api_loan_list_form($form_state, $records) {
  $grouped = _ding_library_user_group_loans($records);
  $renew_buttons = FALSE;
  $form = array();

  $form['loan_data'] = array(
    '#type' => 'value',
    '#grouped' => $grouped,
    '#value' => $records,
  );

  $form['loans'] = array(
    '#tree' => TRUE,
  );

  $all_renewable_loans=array();
  foreach($records as $record) {
    if($record['is_renewable']) {
      $all_renewable_loans[]=$record['id'];
    }
  }

  $form['all_renewable_loans'] = array(
      '#type' => 'hidden',
      '#value' => join(',',$all_renewable_loans),

  );

  foreach ($records as $loan) {
    $form['loans'][$loan['id']] = array(
      '#type' => 'checkbox',
      '#return_value' => $loan['id'],
      '#disabled' => TRUE,
    );
    if ($loan['is_renewable']) {
      $form['loans'][$loan['id']]['#disabled'] = FALSE;
      $renew_buttons = TRUE;
    }
  }

  if ($renew_buttons) {
    $form['renew'] = array(
      '#type' => 'submit',
      '#value' => t('Renew selected'),
      #'#name'=> 'renew',
    );

    $form['renew_all'] = array(
      '#type' => 'submit',
      '#value' => t('Renew all'),
      '#attributes' => array('class' => 'renew-all-button'),
      #'#name' => 'renew_all',
    );
  }

  return $form;
}

function _ding_borger_api_process_form_markup($html) {
  $remove_patterns = array('/<form[^>]*>/',
                           '/<\/form[^>]*>/',
                           '/<input[^>]*form_build_id[^>]*>/',
                           '/<input[^>]*form_id[^>]*>/');
  return preg_replace($remove_patterns, '', $html);	
}
